import { Bot, InlineKeyboard, Keyboard, type Context } from 'grammy'
import { type Conversation, type ConversationFlavor, conversations, createConversation } from "@grammyjs/conversations";
import { bot } from '~/utils/bot';
import { form } from '~/utils/form';
import { ParseMode } from 'grammy/types';

const options: { parse_mode: ParseMode, link_preview_options: Record<PropertyKey, boolean> } = { parse_mode: 'HTML', link_preview_options: { prefer_large_media: true, show_above_text: true } }

const main = async (ctx: Context) => {
    await ctx.reply(
        `<a href="https://xlsft.ru/og_image.png">\u00A0</a>\n<b>üëã –ü—Ä–∏–≤–µ—Ç!</b>\n\n–•–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –ø–æ –ª—é–±–æ–º—É –≤–æ–ø—Ä–æ—Å—É? –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏ —è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤–µ—Ä–Ω—É—Å—å –∫ –≤–∞–º —Å –æ—Ç–≤–µ—Ç–æ–º!`, 
        { reply_markup: new InlineKeyboard().text('–ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ñ–æ—Ä–º—É', 'form').row().url('–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç', 'https://xlsft.ru'), ...options }
    )
}

const list = async (ctx: Context) => {
    if (ctx.from?.id !== Number(useRuntimeConfig().tg_user)) return
    await ctx.reply('–°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞—è–≤–æ–∫', { reply_markup: new InlineKeyboard().url('–û—Ç–∫—Ä—ã—Ç—å', `https://xlsft.ru/api/list?token=${useRuntimeConfig().tg_token}`)})
}

const conversation = async (conversation: Conversation, ctx: Context) => { try {
    const keyboards = [
        new Keyboard().placeholder('–ö–∞–∫ –∫ –≤–∞–º –º–æ–∂–Ω–æ –æ–±—Ä–∞—â–∞—Ç—å—Å—è?').text(ctx.from?.first_name || '–ê–Ω–æ–Ω–∏–º–Ω–æ').resized().oneTime(),
        new Keyboard().placeholder('–ù–∞–ø–∏—à–∏—Ç–µ —Å—é–¥–∞ –ª—é–±—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫–æ—Ç–æ—Ä—É—é –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–π)').oneTime(),
        new Keyboard().placeholder('–í–≤–µ–¥–∏—Ç–µ –ª—é–±–æ–π —É–¥–æ–±–Ω—ã–π –≤–∞–º —Å–ø–æ—Å–æ–± –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏').requestContact('–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç').resized().oneTime()
    ]
    const errors = [
        (ctx: Context) => { ctx.react('üò°'); ctx.reply('–ù—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞—à–µ –∏–º—è, –Ω–∏—á–µ–≥–æ –¥—Ä—É–≥–æ–≥–æ)\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!') },
        (ctx: Context) => { ctx.react('üò°'); ctx.reply('–ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ) –ù–æ –±—ã–ª–æ –±—ã –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–π –ø–æ—Å–ª—É—à–∞—Ç—å –æ –≤–∞—Å –∏(–∏–ª–∏) –æ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!') },
        (ctx: Context) => { ctx.react('üò°'); ctx.reply('–ö–∞–∂–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ —è –Ω–µ —Å–º–æ–≥—É —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!') },
    ]
    await ctx.reply(`<b>üéØ –ù–∞—á–Ω–µ–º!</b>\n\n–ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –≤–∞—à–µ –∏–º—è:`, { reply_markup: keyboards[0], ...options });
    const name = (await conversation.waitFor("message:text", { otherwise: errors[0] }))
    await name.react('‚ù§')
    await ctx.reply(`<b>üòä –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, ${name.message.text}, –ø—Ä–æ–¥–æ–ª–∂–∏–º</b>\n\n–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏–ª–∏ –æ —Å–µ–±–µ:`, { reply_markup: keyboards[1], ...options });
    const description = await conversation.waitFor("message:text", { otherwise: errors[1] })
    await description.react('üëÄ')
    await ctx.reply(`<b>üìû –ò–Ω—Ç–µ—Ä–µ—Å–Ω–æ..., –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–µ</b>\n\n–ö–æ–Ω—Ç–∞–∫—Ç(—ã) –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏:`, { reply_markup: keyboards[2], ...options })
    const checkpoint = conversation.checkpoint();
    const contact = await conversation.waitFor('message')
    if (!contact.has(':contact') || !contact.has(':text')) conversation.rewind(checkpoint)
    await contact.react('üëÄ')
    await conversation.external(() => form({ 
        name: name.message.text, 
        description: description.message.text, 
        contact: contact.message.contact ? `<contact/>${JSON.stringify(contact.message.contact)}` : (contact.message.text || '–ù–µ—Ç –∫–æ–Ω—Ç–∞–∫—Ç–∞')
    }, 'TG'))
    await ctx.reply(`<b>üéâ –ö—Ä—É—Ç–æ! –°–ø–∞—Å–∏–±–æ –∑–∞ —É–¥–µ–ª–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è!</b>\n\n–Ø —É–∂–µ –ø–æ–ª—É—á–∏–ª –≤–∞—à—É –∑–∞—è–≤–∫—É, –∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Å—å)\n–í–æ–∑–≤—Ä–∞—â–∞—é –≤–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é!`, { ...options })
    await conversation.external(async () => {
        await new Promise(resolve => setTimeout(resolve, 1000))
        main(ctx)
    })
} catch (e) { console.log(e) } }


export default defineNitroPlugin(() => {
    bot.use(conversations())
    bot.use(createConversation(conversation, 'form'))
    bot.command('start', main)
    bot.command('form', async (ctx) => await ctx.conversation.enter("form"))
    bot.command('list', list)
    bot.callbackQuery("form", async (ctx) => await ctx.conversation.enter("form"))
    
    bot.start()
})
